#version 400 core

layout(isolines) in;

out vec3 tangent_te;
out float tessx_te;
out float colorVariation_te;

const int MAX_VERTICES = 64; // Max number of hair vertices

// Constants for applying noise to vertex positions.
const int NOISE_OCTAVES = 3;

uniform mat4 model, view, projection;
uniform vec3 vertexData[MAX_VERTICES];
uniform int numHairSegments;
uniform int numSplineVertices;
uniform float hairGroupSpread;
uniform float noiseAmplitude;
uniform float noiseFrequency;
uniform vec3 triangleFace[2];
uniform float hairLength;

uniform sampler2D noiseTexture;

float rand( vec2 p )
{
    return fract(sin(dot(p,vec2(12.9898,78.233))) * 43758.5453);
}

vec3 spline(float tessCoordX)
{
    // 0 -------- 1 -----X-- 2 -------- 3
    //              <--->
    //                t

    float f = clamp(tessCoordX, 0.0, 1.0) * numHairSegments;

    float t = fract(f);

    int index1 = int(f);
    int index0 = max(index1 - 1, 0);
    int index2 = min(index1 + 1, numHairSegments);
    int index3 = min(index2 + 1, numHairSegments);

    vec3 p0 = vertexData[index0];
    vec3 p1 = vertexData[index1];
    vec3 p2 = vertexData[index2];
    vec3 p3 = vertexData[index3];

    vec3 m1 = (p2 - p0) / 2.0;
    vec3 m2 = (p1 - p3) / 2.0;

    return mix(p1 + m1 * t, p2 + m2 * (1-t), smoothstep(0.0, 1.0, t));
}

vec3 shiftedSpline(in vec2 tessCoord)
{
    vec3 pos = spline(tessCoord.x);

    // Offset each hair uniformly in circle around guide hair.
    float r = sqrt(rand(vec2(tessCoord.y)));
    float theta = 6.283 * rand(vec2(0.9 * tessCoord.y));
    pos += hairGroupSpread * r * cos(theta) * triangleFace[0];
    pos += hairGroupSpread * r * sin(theta) * triangleFace[1];

    // Apply noise to offset position.
    float noise = noiseAmplitude * tessCoord.x;
    tessCoord *= vec2(noiseFrequency * (2 * hairLength), 0.2);
    pos.x += noise * (1.0 - 2.0 * texture(noiseTexture, tessCoord.xy).r) * 0.5;
    pos.y += noise * (1.0 - 2.0 * texture(noiseTexture, tessCoord.xy + .1).r) * 0.5;
    pos.z += noise * (1.0 - 2.0 * texture(noiseTexture, tessCoord.xy + .2).r) * 0.5;

    return pos;
}

void main()
{
    vec3 pos = shiftedSpline(gl_TessCoord.xy);
    vec3 prevPos = shiftedSpline(vec2(gl_TessCoord.x - 1.0 / (numSplineVertices - 1), gl_TessCoord.y));
    vec3 nextPos = shiftedSpline(vec2(gl_TessCoord.x + 1.0 / (numSplineVertices - 1), gl_TessCoord.y));

    tangent_te = (model * vec4(nextPos - prevPos, 0.)).xyz;
    tessx_te = gl_TessCoord.x;
    colorVariation_te = texture(noiseTexture, triangleFace[0].xy*gl_TessCoord.yy).r;

    gl_Position = model * vec4(pos, 1);
}
